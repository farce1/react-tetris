{"version":3,"sources":["img/bg.png","components/styles/StyledCell.js","tetrominos.js","components/Cell.jsx","components/styles/StyledStage.js","components/Stage.jsx","components/styles/StyledDisplay.js","components/Display.jsx","components/styles/StyledStartButton.js","components/StartButton.jsx","gameHelpers.js","components/styles/StyledTetris.js","hooks/usePlayer.js","hooks/useStage.js","components/GamePad.jsx","components/Tetris.jsx","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","length","Cell","StyledStage","height","width","Stage","stage","map","row","cell","x","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","onClick","createStage","Array","from","fill","checkCollision","player","moveX","moveY","y","tetromino","pos","StyledTetrisWrapper","bgImage","StyledTetris","usePlayer","useState","collided","setPlayer","rotate","dir","mtrx","val","index","column","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","GamePad","movePlayer","dropPlayer","playerRotate","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","drop","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","keyCode","move","onKeyUp","isMobile","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6304379.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","import styled from 'styled-components'\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.7);\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: '0, 0, 0' },\r\n  I: {\r\n    shape: [[0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0]],\r\n    color: '80, 227, 230'\r\n  },\r\n  J: {\r\n    shape: [[0, 'J', 0],\r\n      [0, 'J', 0],\r\n      ['J', 'J', 0]],\r\n    color: '36, 95, 223'\r\n  },\r\n  L: {\r\n    shape: [[0, 'L', 0],\r\n      [0, 'L', 0],\r\n      [0, 'L', 'L']],\r\n    color: '223, 173, 36'\r\n  },\r\n  O: {\r\n    shape: [['O', 'O'],\r\n      ['O', 'O']],\r\n    color: '223, 217, 36'\r\n  },\r\n  S: {\r\n    shape: [[0, 'S', 'S'],\r\n      ['S', 'S', 0],\r\n      [0, 0, 0]],\r\n    color: '48, 211, 56'\r\n  },\r\n  T: {\r\n    shape: [[0, 0, 0],\r\n      ['T', 'T', 'T'],\r\n      [0, 'T', 0]],\r\n    color: '132, 61, 198'\r\n  },\r\n  Z: {\r\n    shape: [['Z', 'Z', 0],\r\n      [0, 'Z', 'Z'],\r\n      [0, 0, 0]],\r\n    color: '227, 78, 78'\r\n  }\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = 'IJLOSTZ'\r\n  const randTetromino =\r\n        tetrominos[Math.floor(Math.random() * tetrominos.length)]\r\n  return TETROMINOS[randTetromino]\r\n}\r\n","import React from 'react'\r\nimport { StyledCell } from './styles/StyledCell'\r\nimport { TETROMINOS } from '../tetrominos'\r\n\r\nconst Cell = ({ type }) => <StyledCell type={type} color={TETROMINOS[type].color} />\r\n\r\nexport default Cell\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`\n","import React from 'react'\r\n\r\nimport Cell from './Cell'\r\nimport { StyledStage } from './styles/StyledStage'\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n)\r\n\r\nexport default Stage\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n`\r\n","import React from 'react'\r\n\r\nimport { StyledDisplay } from './styles/StyledDisplay'\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>\r\n    {text}\r\n  </StyledDisplay>\r\n)\r\n\r\nexport default Display\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n`\n","import React from 'react'\r\n\r\nimport { StyledStartButton } from './styles/StyledStartButton'\r\n\r\nconst StartButton = ({ onClick }) => (\r\n  <StyledStartButton onClick={onClick}>\r\n        START GAME\r\n  </StyledStartButton>\r\n)\r\n\r\nexport default StartButton\r\n","export const STAGE_WIDTH = 12\r\nexport const STAGE_HEIGHT = 20\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']))\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  // Using for loops to be able to return (and break). Not possible with forEach\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // That we're not go through bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n          'clear'\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 5. If everything above is false\r\n  return false\r\n}\r\n","import styled from 'styled-components'\r\n\r\nimport bgImage from '../../img/bg.png'\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n`\n","import { useState, useCallback } from 'react'\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos'\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers'\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  })\r\n\r\n  const rotate = (tetromino, dir) => {\r\n    // transpose matrix (tetromino)\r\n    const mtrx = tetromino.map((val, index) => tetromino.map(column => column[index]))\r\n    // Reverse each row to get a rotaded matrix\r\n    if (dir > 0) return mtrx.map(row => row.reverse())\r\n    return mtrx.reverse()\r\n  }\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player))\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir)\r\n\r\n    const pos = clonedPlayer.pos.x\r\n    let offset = 1\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset\r\n      offset = -(offset + (offset > 0 ? 1 : -1))\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir)\r\n        clonedPlayer.pos.x = pos\r\n        return\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer)\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided\r\n    }))\r\n  }\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false\r\n    })\r\n  }, [])\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate]\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { createStage } from '../gameHelpers'\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage())\r\n  const [rowsCleared, setRowsCleared] = useState(0)\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0)\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1)\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']))\r\n          return ack\r\n        }\r\n        ack.push(row)\r\n        return ack\r\n      }, [])\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      )\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`\r\n            ]\r\n          }\r\n        })\r\n      })\r\n      // Then check if we got some score if collided\r\n      if (player.collided) {\r\n        resetPlayer()\r\n        return sweepRows(newStage)\r\n      }\r\n      return newStage\r\n    }\r\n\r\n    // Here are the updates\r\n    setStage(prev => updateStage(prev))\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer\r\n  ])\r\n\r\n  return [stage, setStage, rowsCleared]\r\n}\r\n","import React from 'react'\r\n\r\nconst GamePad = ({ stage, movePlayer, dropPlayer, playerRotate }) => (\r\n  <div>\r\n    <button onClick={movePlayer(-1)}>left</button>\r\n    <button onClick={movePlayer(1)}>right</button>\r\n    <button onClick={dropPlayer()}>down</button>\r\n    <button onClick={playerRotate(stage, 1)}>rotate</button>\r\n  </div>\r\n)\r\n\r\nexport default GamePad\r\n","import React, { useState } from 'react'\r\nimport { isMobile } from 'react-device-detect'\r\nimport Stage from './Stage'\r\nimport Display from './Display'\r\nimport StartButton from './StartButton'\r\nimport { createStage, checkCollision } from '../gameHelpers'\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\r\nimport { usePlayer } from '../hooks/usePlayer'\r\nimport { useStage } from '../hooks/useStage'\r\nimport { useInterval } from '../hooks/useInterval'\r\nimport GamePad from './GamePad'\r\n\r\nconst dropInterval = 300\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null)\r\n  const [gameOver, setGameOver] = useState(false)\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer()\r\n  const [stage, setStage] = useStage(player, resetPlayer)\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 })\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n    setStage(createStage())\r\n    setDropTime(dropInterval)\r\n    resetPlayer()\r\n    setGameOver(false)\r\n  }\r\n\r\n  const drop = () => {\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false })\r\n    } else {\r\n      if (player.pos.y < 1) {\r\n        setGameOver(true)\r\n        setDropTime(null)\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true })\r\n    }\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null)\r\n    drop()\r\n  }\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        setDropTime(dropInterval)\r\n      }\r\n    }\r\n  }\r\n\r\n  const move = ({ keyCode }) => {\r\n    switch (!gameOver) {\r\n      case keyCode === 37:\r\n        movePlayer(-1)\r\n        break\r\n      case keyCode === 39:\r\n        movePlayer(1)\r\n        break\r\n      case keyCode === 40:\r\n        dropPlayer()\r\n        break\r\n      case keyCode === 38:\r\n        playerRotate(stage, 1)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  useInterval(() => drop(), dropTime)\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role='button'\r\n      tabIndex='0'\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text='Game Over' />\r\n          ) : (\r\n            <div>\r\n              <Display text='Score' />\r\n              <Display text='Rows' />\r\n              <Display text='Level' />\r\n            </div>\r\n          )}\r\n\r\n          <StartButton onClick={startGame} />\r\n        </aside>\r\n        {isMobile && <GamePad movePlayer={movePlayer} dropPlayer={dropPlayer} stage={stage} playerRotate={playerRotate} />}\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  )\r\n}\r\n\r\nexport default Tetris\r\n","import { useEffect, useRef } from 'react'\r\n\r\nexport function useInterval (callback, delay) {\r\n  const savedCallback = useRef()\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick () {\r\n      savedCallback.current()\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay)\r\n      return () => {\r\n        clearInterval(id)\r\n      }\r\n    }\r\n  }, [delay])\r\n}\r\n","import React from 'react'\r\nimport Tetris from './components/Tetris'\r\n\r\nconst App = () => (\r\n  <div className='App'>\r\n    <Tetris />\r\n  </div>\r\n)\r\n\r\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}
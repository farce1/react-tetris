{"version":3,"sources":["img/bg.png","components/styles/StyledCell.js","tetrominos.js","components/Cell.jsx","components/styles/StyledStage.js","components/Stage.jsx","components/Display.jsx","components/StartButton.jsx","components/styles/StyledTetris.js","components/Tetris.jsx","gameHelpers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","Cell","StyledStage","height","width","Stage","stage","length","map","row","cell","x","key","Display","gameOver","text","StartButton","callBack","StyledTetrisWrapper","bgImage","StyledTetris","Tetris","Array","from","fill","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0c9cf72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","import styled from 'styled-components'\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.7);\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`","export const TETROMINOS = {\n    0: { shape: [[0]], color: '0, 0, 0' },\n    I: {\n        shape: [[0, 'I', 0, 0],\n        [0, 'I', 0, 0],\n        [0, 'I', 0, 0],\n        [0, 'I', 0, 0]],\n        color: '80, 227, 230',\n    },\n    J: {\n        shape: [[0, 'J', 0],\n        [0, 'J', 0],\n        ['J', 'J', 0]],\n        color: '36, 95, 223'\n    },\n    L: {\n        shape: [[0, 'L', 0],\n        [0, 'L', 0],\n        [0, 'L', 'L']],\n        color: '223, 173, 36',\n    },\n    O: {\n        shape: [['O', 'O'],\n        ['O', 'O']],\n        color: '223, 217, 36'\n    },\n    S: {\n        shape: [[0, 'S', 'S'],\n        ['S', 'S', 0],\n        [0, 0, 0]],\n        color: '48, 211, 56'\n    },\n    T: {\n        shape: [[0, 0, 0],\n        ['T', 'T', 'T'],\n        [0, 'T', 0]],\n        color: '132, 61, 198',\n    },\n    Z: {\n        shape: [['Z', 'Z', 0],\n        [0, 'Z', 'Z'],\n        [0, 0, 0]],\n        color: '227, 78, 78'\n    },\n};\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randTetromino =\n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randTetromino];\n};\n","import React from 'react'\r\nimport { StyledCell } from './styles/StyledCell'\r\nimport { TETROMINOS } from '../tetrominos'\r\n\r\nconst Cell = ({ type }) => <StyledCell type={'L'} color={TETROMINOS['L'].color} />\r\n\r\n\r\nexport default Cell","import styled from 'styled-components'\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`","import React from 'react'\r\n\r\nimport Cell from './Cell'\r\nimport { StyledStage } from './styles/StyledStage'\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n    </StyledStage>\r\n)\r\n\r\nexport default Stage","import React from 'react'\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <div>{text}</div>\r\n)\r\n\r\nexport default Display","import React from 'react'\r\n\r\nconst StartButton = ({ callBack }) => (\r\n    <div>start game</div>\r\n)\r\n\r\nexport default StartButton","import styled from 'styled-components'\r\n\r\nimport bgImage from '../../img/bg.png'\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n`","import React from 'react'\r\nimport { createStage } from '../gameHelpers'\r\nimport Stage from './Stage'\r\nimport Display from './Display'\r\nimport StartButton from './StartButton'\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\r\n\r\nconst Tetris = () => {\r\n    return (\r\n        <StyledTetrisWrapper>\r\n            <StyledTetris>\r\n                <Stage stage={createStage()} />\r\n                <aside>\r\n                    <div>\r\n                        <Display text='Score' />\r\n                        <Display text='Rows' />\r\n                        <Display text='Level' />\r\n                    </div>\r\n                    <StartButton />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n}\r\n\r\nexport default Tetris","export const STAGE_WIDTH = 12\r\nexport const STAGE_HEIGHT = 20\r\n\r\nexport const createStage = () =>\r\n    Array.from(Array(STAGE_HEIGHT), () =>\r\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n    )","import React from 'react'\nimport Tetris from './components/Tetris'\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}